
numpy 套件
In [1]:
a_list=[1,2,3,4,5]
print(a_list*3)
[1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]
In [2]:
#numpy套件的ndarray型態，提供element-wise的操作
import numpy as np
a_ndarray=np.array([1,2,3,4,5])
print(a_ndarray*3)
[ 3  6  9 12 15]
In [3]:
print(type(a_ndarray))
print(a_ndarray.ndim) #ndarray的維度
print(a_ndarray.shape) #ndarray的shape
print(a_ndarray.dtype) #ndarray的資料類型
<class 'numpy.ndarray'>
1
(5,)
int32
In [4]:
print(np.zeros(6))  # 六個元素均為零的 1d array
print(np.zeros((2, 6))) # 十二個元素均為零的 2d array
print(np.empty((2, 6, 2))) # 二十四個元素均為未初始化的值
print(np.arange(11)) # 十一個元素為 0 到 10 的 1d array
[0. 0. 0. 0. 0. 0.]
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
[[[6.23042070e-307 4.67296746e-307]
  [1.69121096e-306 1.06811490e-306]
  [1.33511290e-306 7.56599807e-307]
  [8.90104239e-307 1.24610383e-306]
  [1.69118108e-306 8.06632139e-308]
  [1.20160711e-306 1.69119330e-306]]

 [[1.29062229e-306 9.79094971e-307]
  [6.89804133e-307 8.45610231e-307]
  [9.34601642e-307 1.06809792e-306]
  [9.34607074e-307 1.42418172e-306]
  [1.37961641e-306 1.22383391e-307]
  [8.45610231e-307 1.42404727e-306]]]
[ 0  1  2  3  4  5  6  7  8  9 10]
ndarray的進階操作
In [5]:
my_array = np.arange(10)
print(my_array)
print(my_array[0])
print(my_array[0:5]) #取0,1,2,3,4位置之值
[0 1 2 3 4 5 6 7 8 9]
0
[0 1 2 3 4]
In [6]:
#二維ndarray取值
my_2d_array = np.array([np.arange(0, 5), np.arange(5, 10)])
print(my_2d_array)
print(my_2d_array[1, :]) # 第二列
print(my_2d_array[:, 1]) # 第二欄
print(my_2d_array[1, 1]) # 第二列第二欄的元素
[[0 1 2 3 4]
 [5 6 7 8 9]]
[5 6 7 8 9]
[1 6]
6
In [9]:
#假設有六個組別"Modern Web", "DevOps", "Cloud", "Big Data", "Security", "自我挑戰組"，
#其參加人數分別為56, 8, 19, 14, 6, 71人
ironmen = [56, 8, 19, 14, 6, 71]
groups = ["Modern Web", "DevOps", "Cloud", "Big Data", "Security", "自我挑戰組"]
ironmen_array = np.array(ironmen)
groups_array = np.array(groups)
print(ironmen_array)
print(groups_array)
[56  8 19 14  6 71]
['Modern Web' 'DevOps' 'Cloud' 'Big Data' 'Security' '自我挑戰組']
In [10]:
# 用人數去篩選組別
print(ironmen_array >= 10) # 布林值陣列
print(groups_array[ironmen_array >= 10]) # 鐵人數大於 10 的組別
# 用組別去篩選人數
print(groups_array != "自我挑戰組") # 布林值陣列
print(ironmen_array[groups_array != "自我挑戰組"]) # 除了自我挑戰組以外的鐵人數
[ True False  True  True False  True]
['Modern Web' 'Cloud' 'Big Data' '自我挑戰組']
[ True  True  True  True  True False]
[56  8 19 14  6]
Ndarray轉置
In [11]:
my_1d_array = np.arange(10)
print(my_1d_array)
my_2d_array = my_1d_array.reshape((2, 5)) #更改array的外型
print(my_2d_array)
print(my_2d_array.T)
[0 1 2 3 4 5 6 7 8 9]
[[0 1 2 3 4]
 [5 6 7 8 9]]
[[0 5]
 [1 6]
 [2 7]
 [3 8]
 [4 9]]
In [16]:
print(np.arange(24).reshape(4,6))
[[ 0  1  2  3  4  5]
 [ 6  7  8  9 10 11]
 [12 13 14 15 16 17]
 [18 19 20 21 22 23]]
In [ ]:
# ndarray nan(空值) 與 inf(無窮大)
In [13]:
nan_array = np.array([56, 8, 19, 14, 6, np.nan])
print(nan_array)
[56.  8. 19. 14.  6. nan]
In [17]:
normal_samples = np.random.normal(size = 10) 
# 生成 10 組標準常態分配（平均值為 0，標準差為 1 的常態分配）隨機變數
uniform_samples = np.random.uniform(size = 10) 
# 生成 10 組介於 0 與 1 之間均勻分配隨機變數

print(normal_samples)
print("---") # 分隔線
print(uniform_samples)
[ 3.20744797 -1.73440873  0.92368594 -1.09159025  0.72971106  2.11139647
  0.79573145 -0.51875275  0.06306518 -1.47259325]
---
[0.64575129 0.76281461 0.36893595 0.77836448 0.72135184 0.4951156
 0.93513249 0.73317985 0.95102944 0.27981293]
In [ ]:
