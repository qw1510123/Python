
Python物件: List, Tuple, Dict, Sets

In [2]:
#list串列
my_list0 = []
my_list1 = list()
my_list2 = ['python', 'js', 'SQL'] 
print(my_list2[0])
print(my_list2[1])
print(my_list2[2])
python
js
SQL
In [2]:
#附加於最後
my_list2 = ['python', 'js', 'SQL'] 
my_list2.append("java")
my_list2[3]
print(len(my_list2))
print(len(my_list2[0]))
4
6
In [4]:
#新增至特定位置
languages = ['python', 'js', 'go']
languages.insert(0, 'java')
print(languages)
['java', 'python', 'js', 'go']
In [5]:
#刪除
languages = ['python', 'js', 'go']
del languages[-1] 
print(languages)
['python', 'js']
In [7]:
#長度
print(len(['python', 'js', 'go']) )
3
In [8]:
#檢查是否存在與debug意思相近
print('java' in ['python', 'js', 'go'])
False
In [10]:
#串列重複
a=[1,2]
print(a*5)
[3, 2, 3, 2, 3, 2, 3, 2, 3, 2]
In [25]:
#串列取值
a=[1,2,3,4,5,6,7,8,9]
b=a[0:3]   #在此範圍內取值
print(b)
c=a[0:9:2]   #在這個間隔裡取值
print(c)
del a[7:9]  #刪除串列某範圍的值
print(a)
print(min(a)) #最小值
print(max(a)) #最大值
print(a.index(1)) #1出現的索引值
print(a.count(1)) #1出現的次數
a.reverse()  #串列反轉
print(a)
a.sort()   #串列排序
print(a)
[1, 2, 3]
[1, 3, 5, 7, 9]
[1, 2, 3, 4, 5, 6, 7]
1
7
0
1
[7, 6, 5, 4, 3, 2, 1]
[1, 2, 3, 4, 5, 6, 7]
元組可以視為不可改變的串列 tuple 跟 list 很像，但是我們不能新增刪除或者更新 tuple 的元素 元組比起串列好處： 佔用空間較少 可以當做字典的 key（因不可變） 具名 tuple 可當做物件替代 當做函式引數

In [48]:
a_list = ['python', 'js', 'go']
a_tuple = tuple(a_list) 
print(a_tuple)
print(a_tuple[0])
('python', 'js', 'go')
python
字典(dictionary - dict)，為帶有鍵值（key）的 串列(list)

In [39]:
languages = {}
languages = {'name':'python','version':'3.5'} 
print(languages['name']) 
print(languages)
print(languages.keys())
print(languages.values())
print(languages.items()) 
print('name' in languages )
python
{'name': 'python', 'version': '3.5'}
dict_keys(['name', 'version'])
dict_values(['python', '3.5'])
dict_items([('name', 'python'), ('version', '3.5')])
True
In [51]:
a = {'name':'python','version':'3.5'} 
b=a.copy()
print(b)
b.clear()
print(b)
print(a.get('name'))
a.update({'name':'java'})
print(a)
{'name': 'python', 'version': '3.5'}
{}
python
{'name': 'java', 'version': '3.5'}
In [ ]:
